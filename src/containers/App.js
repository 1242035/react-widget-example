import
{
	connect
}
from 'react-redux';
import
{
	TOKEN_KEY
}
from '../config';
import
{
	meFromToken,
	meFromTokenSuccess,
	meFromTokenFailure,
	resetToken
}
from '../actions/users';
import App from '../components/App.js';

const mapDispatchToProps = ( dispatch ) =>
{
	return {
		loadUserFromToken: () =>
		{
			let token = sessionStorage.getItem( TOKEN_KEY );
			if ( ! token || token === '' )
			{ //if there is no token, dont bother
				return;
			}

			//fetch user from token (if server deems it's valid token)
			dispatch( meFromToken( token ) )
				.then( ( response ) =>
				{
					if ( ! response.error )
					{
						//reset token (possibly new token that was regenerated by the server)
						sessionStorage.setItem( TOKEN_KEY, response.payload.data.token );
						dispatch( meFromTokenSuccess( response.payload ) )
					}
					else
					{
						sessionStorage.removeItem( TOKEN_KEY ); //remove token from storage
						dispatch( meFromTokenFailure( response.payload ) );
					}
				} );
		},
		resetMe: () =>
		{
			sessionStorage.removeItem( TOKEN_KEY ); //remove token from storage
			dispatch( resetToken() );
		}
	}
}


export const AppContainer = connect( null, mapDispatchToProps )( App );
